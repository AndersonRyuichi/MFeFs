{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ***Modelagem de Fen Fisicos***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 21/02***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Formatação de textos***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Neste notebook anotaremos as aulas de **Modelagem de Fenomenos Fisicos** realizadas durante o semestre. Aqui registraremos *textos formados* , *programas em Python* , ***tipografia matematica*** e também *gráficos*.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Equação: $$f(x) = 2 x + p$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Raiz quadrada: $$\\sqrt{x + 2 a b}$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fração: $$\\frac{X + 1}{x-1}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Teorema de Pitágoras: $$a^2     =b^2+     c^2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Baskara: $$x_{1,2} = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2^a}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Funções***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dobro(x):\n",
    "    return 2*x\n",
    "\n",
    "def soma(x,y):\n",
    "    return x + y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dobro(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soma(4,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'AbcDef'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soma(\"Abc\", \"Def\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Exemplos 'type'***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(\"7.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(\"1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type('3')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aula 27/02"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Funções***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def quadrado(x):\n",
    "    return x**2\n",
    "\n",
    "def polinomio(x):\n",
    "    return x**3-2*x**2+4\n",
    "\n",
    "def voz(animal):\n",
    "    if animal == \"cão\":\n",
    "        return \"au-au\"\n",
    "    elif animal == \"gato\":\n",
    "        return \"miau\"\n",
    "    elif animal == \"vaca\":\n",
    "        return \"muu\"\n",
    "    else:\n",
    "        return \"animal desconhecido\"\n",
    "\n",
    "def temperatura(temp):\n",
    "    if temp <= 10:\n",
    "        return \"muito frio\"\n",
    "    elif temp <= 15:\n",
    "        return \"frio\"\n",
    "    elif temp <= 22:\n",
    "        return \"quente\"\n",
    "    else:\n",
    "        return \"muito quente\"\n",
    "    \n",
    "def fração(x):\n",
    "    if x == 1:\n",
    "        return \"função invalida\"\n",
    "    elif x == 1:\n",
    "        return \"função invalida\"\n",
    "    else:\n",
    "        return 1/(x**2-1)\n",
    "    \n",
    "def fração2(x):\n",
    "    if x == 1 or x == -1:\n",
    "        return \"Não pode ser 1/-1\"\n",
    "    else:\n",
    "        return 1/(x**2-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 28/02***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Funções***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "desconto = 0.8\n",
    "def preco_do_produto(valor, desconto):\n",
    "       return valor * desconto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preco_do_produto(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bhaskaa(a,b,c):\n",
    "    raizes = []\n",
    "    if a == 0:\n",
    "        print(\"Equação inválida: a == 0\")\n",
    "        return raizes\n",
    "    else:\n",
    "        delta = (b**2) - (-4 * a * c)\n",
    "        if delta <= 0:\n",
    "        print(\"Equação inválida\")\n",
    "        x1 = ( - b + delta ** 0.5)/( 2 * a )\n",
    "        x2 = ( - b - delta ** 0.5)/( 2 * a )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista = [ 3 , 2 , -1 , 0 , 2 , 8 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lista[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista1 = [ 88 , 91 , -108 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 2, -1, 0, 2, 8, 88, 91, -108]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lista + lista1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[88, 91, -108, 3, 2, -1, 0, 2, 8]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lista1 + lista"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(lista1 + lista)[7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = [ 4 , \"Maria\" , True , 8.456 , -1 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Maria'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lst[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'e'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"texto exemplo\"[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "Maria\n",
      "True\n",
      "8.456\n",
      "-1\n",
      "12\n",
      "-4\n",
      "8\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "for elemento in lst:\n",
    "    print(elemento)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "-4\n",
      "8\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "for i in [ 6 , -2 , 4 , 7 ]:\n",
    "    print( i * 2 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "produto = 1\n",
    "for i in[6,-2,4,7]:\n",
    "    produto = produto * i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-336"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "produto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 05/03***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Funções"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Conceito matemático de função\n",
    "  - Exemplos\n",
    "    - *em português*: `dobro de`; *em notação matemática*: $f(x) = 2x$; *tabelas*\n",
    "  - Domínio, imagem, codomínio\n",
    "  - Assinatura de função: $f: X \\longrightarrow Y$\n",
    "  - Conjuntos importantes\n",
    "    - $\\mathbb{Z}$ - numeros inteiros\n",
    "    - $\\mathbb{N}$ - numeros naturais\n",
    "    - $\\mathbb{Q}$ - numeros racionais\n",
    "    - $\\mathbb{R}$ - numeros reais\n",
    "    - $\\mathbb{C}$ - numeros complexos\n",
    "  - O ponto de vista computacional: Função como procedimento de cálculo.\n",
    "  - ***Definição de função***: Função $f: X \\longrightarrow Y$ é um processo de cálculo em que não há excessão no domínio $X$ e não há ambiguidade na imagem $\\mathrm{Im}(X) \\subseteq Y $.\n",
    "  - Contraexemplo de função: raiz quadrada"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Exercicios 1***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def lado_quadrado(l):\n",
    "    return l**2\n",
    "lado_quadrado(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def perimetro_retangulo(a,b):\n",
    "    return a*2 + b*2\n",
    "perimetro_retangulo(3,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def areatriangulo(b,h):\n",
    "    return (b * h) / 2\n",
    "areatriangulo(3,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12.566370614359172"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math\n",
    "def areacirculo(r):\n",
    "    return math.pi * (r**2)\n",
    "areacirculo(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12.56"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def perimetrocirculo(r):\n",
    "    return (2 * 3.14) * r\n",
    "perimetrocirculo(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def polinomio_terceiro_grau(a,b,c,d,x):\n",
    "    if a <= 0:\n",
    "        print (\"solução invalida\")\n",
    "    else:\n",
    "        return a * x ** 3 + b * x ** 2 + c * x + d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "polinomio_terceiro_grau(2,-5,0,1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "solução invalida\n"
     ]
    }
   ],
   "source": [
    "polinomio_terceiro_grau(-1,-5,0,1,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Exercicios 2***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def teste(a,b):\n",
    "    if 2*a >= b:\n",
    "        return a / b\n",
    "    else:\n",
    "        print(\"sol inv\")\n",
    "teste(200,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def teste1(a,b):\n",
    "    if a < b:\n",
    "        return b\n",
    "    else:\n",
    "        return a\n",
    "teste1(12,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def teste3(x,y,z):\n",
    "    if x>y and a>z:\n",
    "        return(x)\n",
    "    elif y>x and y>z:\n",
    "        return(y)\n",
    "    elif z>x and z>y:\n",
    "        return(z)\n",
    "teste3(2,3,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def teste31(a,b,c):\n",
    "    return teste1(teste1(a,b), c)\n",
    "teste31(1,2,3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 05/03***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Exercicios 3***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- ***g(x) = x²***\n",
    "- dom(g) = $\\mathbb{R}$\n",
    "- im(g) = $\\mathbb{R}$ >= 0\n",
    "-      = {x I x E $\\mathbb{R}$ ^ x >= 0} <- (setbuilder)\n",
    "- ***f(x) = 1 / (x²-1)***\n",
    "- dom(f) = {x I x E $\\mathbb{R}$ ^ x =I 1 ^ x=I -1} <- (setbuilder)\n",
    "- im(f) = {x I E $\\mathbb{R}$ ^ -1 <= x < -1 ^ x > 1} <- (setbuilder)\n",
    "- ***y = $\\sqrt{x ^2 - 4}$***\n",
    "- dom(f) = {x I x E $\\mathbb{R}$ ^ (x <= -2 U x >= 2)} <- (setbuilder)\n",
    "- ***f(x) = \\sqrt{x=2}***\n",
    "- dom(f) = x + z >= 0 and x >= -z\n",
    "- x E $\\mathbb{R}$ / x >= -z\n",
    "- dom (f) = {x I x E $\\mathbb{R}$ ^ x >= -2} <- (setbuilder)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ***Aula 4***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "-4\n",
      "8\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "for i in [ 6 , -2 , 4 , 7 ]:\n",
    "    print( i * 2 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A\n",
      "n\n",
      "d\n",
      "e\n",
      "r\n",
      "s\n",
      "o\n",
      "n\n",
      " \n",
      "R\n",
      "y\n",
      "u\n",
      "i\n",
      "c\n",
      "h\n",
      "i\n",
      " \n",
      "G\n",
      "a\n",
      "b\n",
      "r\n",
      "i\n",
      "e\n",
      "l\n",
      " \n",
      "F\n",
      "u\n",
      "z\n",
      "i\n",
      "n\n",
      "o\n"
     ]
    }
   ],
   "source": [
    "for s in \"Anderson Ryuichi Gabriel Fuzino\":\n",
    "    print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 0.5, 0.3333333333333333, 0.25]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1/n for n in range(1,5)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0,\n",
       " 0.5,\n",
       " 0.25,\n",
       " 0.125,\n",
       " 0.0625,\n",
       " 0.03125,\n",
       " 0.015625,\n",
       " 0.0078125,\n",
       " 0.00390625,\n",
       " 0.001953125,\n",
       " 0.0009765625,\n",
       " 0.00048828125,\n",
       " 0.000244140625,\n",
       " 0.0001220703125,\n",
       " 6.103515625e-05,\n",
       " 3.0517578125e-05,\n",
       " 1.52587890625e-05,\n",
       " 7.62939453125e-06,\n",
       " 3.814697265625e-06,\n",
       " 1.9073486328125e-06,\n",
       " 9.5367431640625e-07]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1/(2**x) for x in range(0,21)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0,\n",
       " 0.25,\n",
       " 0.1111111111111111,\n",
       " 0.0625,\n",
       " 0.04,\n",
       " 0.027777777777777776,\n",
       " 0.02040816326530612,\n",
       " 0.015625,\n",
       " 0.012345679012345678,\n",
       " 0.01]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1/n**2 for n in range(1,11)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.5,\n",
       " 0.25,\n",
       " 0.125,\n",
       " 0.0625,\n",
       " 0.03125,\n",
       " 0.015625,\n",
       " 0.0078125,\n",
       " 0.00390625,\n",
       " 0.001953125,\n",
       " 0.0009765625]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1/2**n for n in range(1,11)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 0.5, 0.5, 0.375, 0.25, 0.15625, 0.09375, 0.0546875, 0.03125, 0.017578125]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def serie1(x):\n",
    "[1/n**2 for n in range(0,10)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Escreva uma função em *Python* que:\n",
    "  - Multiplique os valores de uma lista passada como parâmetro.\n",
    "  - Dado $n$, some os valores da lista\n",
    "$[1, \\frac{1}{2}, \\frac{1}{3}, \\frac{1}{4}, \\cdots , \\frac{1}{n}]$.\n",
    "  - Calcule a soma dos termos da sequência\n",
    "$ 1, \\frac{1}{4}, \\frac{1}{9}, \\frac{1}{16}, \\frac{1}{25}$.\n",
    "  - Dado $n$, determine o valor da série ${1 \\over 2} + {1 \\over 2^2} + \\cdots + {1 \\over 2^{n}}$.\n",
    "  - Dado $n$, determine o valor da série $1 + {1 \\over 3} + {1 \\over 9} + {1 \\over 27} + \\cdots + {1 \\over 3^{n}}$.\n",
    "  - Calcule o *fatorial* de $n$, isto é, $n!$, para $n$ dado."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 5***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A *compreensão de listas* (*list comprehension*) é recurso existente em algumas linguagens de programação para a construção de listas a partir de estruturas lineares dadas.\n",
    "\n",
    "Historicamente, a notação de *list comprehension* basei-se na notação de *set builder* desenvolvida por ***Cantor*** no século XIX. Os números pares podem ser definidos por meio da notação de *set builder* do seguinte modo, $\\{\\ n\\  |\\ n \\in \\mathbb{N}\\ \\mathrm{e}\\ n\\ \\mathrm{é\\ par} \\}$. A notação de *set builder* pode ser formalizada de um modo geral por meio da seguinte definição:\n",
    "\n",
    "  - O conjunto $\\{x | \\mathrm{P}(x) \\}$ é o conjunto dos $x$ tais que $\\mathrm{P}(x)$ é verdadeira."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[6, 2, 12, 16]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exemplo de *list comprehension*\n",
    "\n",
    "[2 * x for x in [3, 1, 6, 8]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Gere as sequências a seguir por meio de *list comprehension*:\n",
    "\n",
    "  - $[\\ 1, \\frac{1}{2}, \\frac{1}{3}, \\frac{1}{4}, \\frac{1}{5} ]$\n",
    "  - $[\\ 1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{8}, \\frac{1}{16}\\ ]$\n",
    "  - $[\\ 1, \\frac{1}{4}, \\frac{1}{9}, \\frac{1}{16}, \\frac{1}{25} \\ ]$\n",
    "\n",
    "\n",
    "1. Escreva funções que gerem as sequências a seguir por meio de *list comprehension* para um dado número $n$ de termos:\n",
    "\n",
    "  - $[\\ 1, \\frac{1}{2}, \\frac{1}{3}, \\frac{1}{4}, \\frac{1}{5}, \\cdots\\ ]$\n",
    "  - $[\\ 1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{8}, \\frac{1}{16}, \\cdots\\ ]$\n",
    "  - $[\\ 1, \\frac{1}{4}, \\frac{1}{9}, \\frac{1}{16}, \\frac{1}{25}, \\cdots \\ ]$\n",
    "\n",
    "2. Escreva uma função que calcule $n!$, o *fatorial* de um número natural dado, por meio de compreensão de listas.\n",
    "\n",
    "3. Gere a seguinte sequência para $n$ dado: $$1, {1 \\over 1!}, {1 \\over 2!}, {1 \\over 3!}, {1 \\over 4!}, \\cdots, {1 \\over n!}$$\n",
    "\n",
    "4. Escreva uma função que calcule o número $e$ (*número de Euler*, a base dos *logaritmos neperianos*), dada a quantidade $n$ de\n",
    "  parcelas\n",
    "  $$ e = 1 + {1 \\over 1!} + {1 \\over 2!} + {1 \\over 3!} + {1 \\over 4!} + \\cdots\\ + {1 \\over n!}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1/x for x in range(1,6)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 0.5, 0.25, 0.125, 0.0625]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1 / 2**x  for x in range(0, 5)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 0.25, 0.1111111111111111, 0.0625, 0.04]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1/x**2 for x in range(1,6)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Questão 1.1***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 0.5, 0.3333333333333333, 0.25, 0.2]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def numero(n):\n",
    "    return [1/x for x in range(1,n)]\n",
    "numero(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 0.5, 0.25, 0.125, 0.0625]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def numero2(n):\n",
    "    return [1/2**x for x in range(0,n)]\n",
    "numero2(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 0.25, 0.1111111111111111, 0.0625, 0.04]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def numero3(n):\n",
    "    return [1/x**2 for x in range(1,n)]\n",
    "numero3(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para cada exercício a seguir, escreva uma função que determine o valor aproximado do limite indicado.\n",
    "\n",
    "1. $\\displaystyle\\lim_{x \\rightarrow \\infty}\\frac{x^3}{e^x}$\n",
    "\n",
    "1. $\\displaystyle\\lim_{x \\rightarrow 0} x^{4x}$\n",
    "\n",
    "1. $\\displaystyle\\lim_{x \\rightarrow \\infty}\\left(1 + \\frac{2}{x}\\right)^x$\n",
    "\n",
    "1. $\\displaystyle\\lim_{x \\rightarrow 0}\\frac{3^x - 2^x}{x^2}$\n",
    "\n",
    "1. $\\displaystyle\\lim_{x \\rightarrow \\infty}\\frac{2x^3-x^2+3x+1}{3x^3+2x^2-x-1}$\n",
    "\n",
    "1. $\\displaystyle\\lim_{x \\rightarrow 3}\\frac{x^3-2x^2-2x-3}{x^2-9}$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1.\n",
    "#x -> 00\n",
    "#[1,2,3,4,5,...,n,...] , range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return [x**3/2.7182**x]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0.36789051578250315],\n",
       " [0.07581747363966707],\n",
       " [0.026538462986442895],\n",
       " [0.012168853816299821],\n",
       " [0.0065498854593492965],\n",
       " [0.003918916536602706],\n",
       " [0.0025273516844366243],\n",
       " [0.0017236332487640964],\n",
       " [0.001227492880526559]]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[f(1/i) for i in range(1,10)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10000000000000000000000000000000000000000, 22528399544939174411840147874772641, 79228162514264337593543950336, 459986536544739960976801, 4738381338321616896, 95367431640625, 4294967296, 531441, 256, 1]\n"
     ]
    }
   ],
   "source": [
    "#2.\n",
    "def f(y,x,z):\n",
    "    return [x**(4*x) for x in range(y,x,z)]\n",
    "\n",
    "print(f(10,0,-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[7.244646118252348,\n",
       " 7.246043604770342,\n",
       " 7.247414303245067,\n",
       " 7.2487589765959415,\n",
       " 7.250078359044312,\n",
       " 7.251373157450927,\n",
       " 7.252644052578209,\n",
       " 7.253891700283742,\n",
       " 7.2551167326491015,\n",
       " 7.256319759047028,\n",
       " 7.25750136715314]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#3.\n",
    "def f(y,x):\n",
    "    return [(1+2/x)**x for x in range(y,x+1)]\n",
    "\n",
    "f(100,110)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[580.25, 236.679012345679, 98.515625, 42.02040816326531, 18.47222222222222, 8.44, 4.0625, 2.111111111111111, 1.25, 1.0]\n"
     ]
    }
   ],
   "source": [
    "#4.\n",
    "def f(y,x,z):\n",
    "    return [(3**x-2**x)/x**2 for x in range(y,x,z)]\n",
    "\n",
    "print(f(10,0,-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.3793103448275862,\n",
       " 0.2925764192139738,\n",
       " 0.2851511169513798,\n",
       " 0.28483491885842194,\n",
       " 0.28567310464110696,\n",
       " 0.2866476796783381,\n",
       " 0.28754365541327126,\n",
       " 0.2883235022386469,\n",
       " 0.28899334900235035,\n",
       " 0.2895688049947059]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5.\n",
    "def f(y,x):\n",
    "    return [(((2*x)**3)-(x**2)+(3*x)+1)/(((3*x)**3)+((2*x)**2)-x-1) for x in range(y,x)]\n",
    "\n",
    "f(1,11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.4444444444444444, 0.75, 1.4]\n"
     ]
    }
   ],
   "source": [
    "#6.\n",
    "def f(y,x,z):\n",
    "    return [(x**3-2*x**2-2**x-3)/(x**2-9) for x in range(x)]\n",
    "print(f(10,3,-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 27/03***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dadas as notas maiores do que 7, somar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53.3\n"
     ]
    }
   ],
   "source": [
    "#notas\n",
    "notas = [8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1]\n",
    "\n",
    "#acumulador\n",
    "soma=0\n",
    "\n",
    "#for que percorre as notas\n",
    "for nota in notas:\n",
    "    if nota > 7.0:\n",
    "        soma = soma + nota\n",
    "print(soma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Programação Funcional"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Calculo Lambda***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(lambda x: x + 1)(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(lambda a,b: a + b)(4, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-14"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(lambda x , y: x**3 - 4*x**2 + 2*y )(2,-3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "soma = lambda a, b: a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.<lambda>(a, b)>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5.7, 6, 4.2, 6.9]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(filter(lambda x: x<7, [8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1])) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5.7, 6, 4.2, 6.9]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[nota for nota in [8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1] if nota<7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "for i in range(5):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5, 2, 7, 8, -8, 6]"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(map(lambda x:x+1, [4,1,6,7,-9,5]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[True, False, True, False, True, False, True, True, False, True]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(map(lambda x:x>7, [8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import functools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "76.1"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "functools.reduce(lambda a, b: a + b, [8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "478973983.04028004"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "functools.reduce(lambda a,b: a * b, [8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "121.06783056690007"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "functools.reduce(lambda a,b: a*1.1 + b, [8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "66.22000000000001"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "functools.reduce(lambda a,b: a+b, (filter (lambda a: a>7, (map(lambda a: a*1.1,[8.9,5.7,9,6,10,4.2,8.5,7.8,6.9,9.1])))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 02/04***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "- while\n",
    "- for\n",
    "- list comprenhension\n",
    "- map, filter, reduce"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "contador = 1\n",
    "soma = 0\n",
    "while contador <= 5:\n",
    "    soma = soma + contador\n",
    "    contador = contador + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soma"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***For***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "numero = 1\n",
    "def number(n):\n",
    "    for i in [1 / 2**n in range(1,n)]:\n",
    "        numero = numero + i"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***While***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "contador = 1\n",
    "def number(n):\n",
    "    while contador <= n:\n",
    "        return 1/2**x\n",
    "        contador = contador + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***List Comprehension***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def numero(n):\n",
    "    [1 / 2**x  for x in range(1,n)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Reduce***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import functools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 0\n",
    "def number(n):\n",
    "    functools.reduce(lambda n,x: n + x, (filter (lambda n: x <= n, (map(lambda n: n + 1, [1/2**x])))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Map***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.9990234375\n"
     ]
    }
   ],
   "source": [
    "num = [x for x in range(0,11)]\n",
    "result = sum(i for i in map(lambda x: (1/(2**x)),num))\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 03/04***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gráficos de funções"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotagem básica"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# import numpy as np\n",
    "\n",
    "X = np.linspace(-4, 4, 256)\n",
    "\n",
    "reta = 2*X\n",
    "# reta = list(map(lambda x:2*x, X))\n",
    "# parabola = X**2 -10*X -20\n",
    "\n",
    "# C = np.cos(X) \n",
    "# S = np.sin(X)\n",
    "\n",
    "plt.plot(X, reta)\n",
    "\n",
    "# plt.plot(X, parabola)\n",
    "# plt.plot(X, C)\n",
    "# plt.plot(X, S)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Alguns efeitos especiais"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a figure of size 8x6 inches, 80 dots per inch\n",
    "plt.figure(figsize=(8, 6), dpi=80)\n",
    "\n",
    "# Create a new subplot from a grid of 1x1\n",
    "# plt.subplot(1, 1, 1)\n",
    "\n",
    "X = np.linspace(-np.pi, np.pi, 256, endpoint=True)\n",
    "C = np.cos(X)\n",
    "S = np.sin(X)\n",
    "\n",
    "# Plot cosine with a blue continuous line of width 4 (pixels)\n",
    "plt.plot(X, C, color=\"blue\", linewidth=4.0, linestyle=\"-\")\n",
    "\n",
    "# Plot sine with a green continuous line of width 2 (pixels)\n",
    "plt.plot(X, S, color=\"green\", linewidth=2.0, linestyle=\"-\")\n",
    "\n",
    "# Set x limits\n",
    "plt.xlim(-4.0, 4.0)\n",
    "\n",
    "# Set x ticks\n",
    "plt.xticks(np.linspace(-4, 4, 9, endpoint=True))\n",
    "\n",
    "# Set y limits\n",
    "plt.ylim(-1.0, 1.0)\n",
    "\n",
    "# Set y ticks\n",
    "plt.yticks(np.linspace(-1, 1, 5, endpoint=True))\n",
    "\n",
    "# Save figure using 72 dots per inch\n",
    "plt.savefig(\"exercice_2.png\", dpi=72)\n",
    "\n",
    "# Show result on screen\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funções definidas por partes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def multiplos_intervalos(x):\n",
    "  if x <= 1:\n",
    "    return 1\n",
    "  elif x>1 and x<=2:\n",
    "    return 2*x\n",
    "  else:\n",
    "    return 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# from matplotlib import pyplot as plt\n",
    "# import numpy as np\n",
    "\n",
    "X = np.linspace(-4, 4, 100)\n",
    "\n",
    "Fm = [multiplos_intervalos(x) for x in X]\n",
    "\n",
    "plt.xlabel('eixo X')\n",
    "plt.ylabel('Y')\n",
    "\n",
    "plt.grid(True, linestyle='-.')\n",
    "\n",
    "plt.title(\"Função definida por partes\")\n",
    "plt.plot(X, Fm, color=\"red\", linewidth=5.0, linestyle=\"-\")\n",
    "\n",
    "plt.savefig(\"multiplas_partes.png\", dpi=72)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercícios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Implemente uma função definida por partes para cada item a seguir:\n",
    "\n",
    "  - Plotar uma pista de skate.\n",
    "  \n",
    "  - Plotar a fachada de uma casa.\n",
    "\n",
    "  - Plotar uma figura livremente escolhida."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Imports necessarios***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import math\n",
    "from matplotlib.patches import Polygon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Pista de skate***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def pista(x):\n",
    "  if x>-1 and x<=1:\n",
    "    return - math.sqrt(1 - x**2)\n",
    "  else:\n",
    "    return 0\n",
    "X = np.linspace(-2.0, 2.0, 100)\n",
    "Fm = [pista(x) for x in X]\n",
    "plt.xlabel('Eixo X')\n",
    "plt.ylabel('Eixo Y')\n",
    "plt.grid(True, linestyle='-.')\n",
    "plt.title(\"Pista de skate\")\n",
    "plt.plot(X, Fm, color=\"gray\", linewidth=10.0, linestyle=\"-\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Fachada de uma casa com garagem***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.axes()\n",
    "square = plt.Rectangle((0,0), 25, 20, fc='navy',ec=\"black\")\n",
    "plt.gca().add_patch(square)\n",
    "door = plt.Rectangle((15,0), 4.5, 9, fc='brown',ec=\"black\")\n",
    "plt.gca().add_patch(door)\n",
    "doorhandle1 = plt.Rectangle((15.5,3.7), 2, 0.3, fc='black',ec=\"black\")\n",
    "plt.gca().add_patch(doorhandle1)\n",
    "doorhandle2 = plt.Rectangle((17.2,3.3), 0.3, 0.8, fc='black',ec=\"black\")\n",
    "plt.gca().add_patch(doorhandle2)\n",
    "garage = plt.Rectangle((25,0), 30, 20, fc='navy',ec=\"black\")\n",
    "plt.gca().add_patch(garage)\n",
    "garagedoor = plt.Rectangle((30,0), 20, 15, fc='red',ec=\"red\")\n",
    "plt.gca().add_patch(garagedoor)\n",
    "detailgarage = plt.Rectangle((38,3), 4.5, 1, fc='brown',ec=\"black\")\n",
    "plt.gca().add_patch(detailgarage)\n",
    "window = plt.Rectangle((3.5,4), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window)\n",
    "windowdetail1 = plt.Rectangle((7.3,4), 0.2, 8, fc='black',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(windowdetail1)\n",
    "windowdetail2 = plt.Rectangle((3.5,7.8), 8, 0.2, fc='black',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(windowdetail2)\n",
    "plt.axis('equal')\n",
    "\n",
    "#triangle\n",
    "pts = np.array([[0,20], [55,20], [27.5,28]])\n",
    "p = Polygon(pts, closed=False, fc='brown')\n",
    "ax = plt.gca()\n",
    "ax.add_patch(p)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Fachada de um predio***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXYAAAD4CAYAAAD4k815AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAATMUlEQVR4nO3db4xdd33n8fdn84cQWjwJcWzLJnKQLApllws7yqZlVd1NoIspivMAqiDUtXYj+Un/QGFVQnlAVtoHoO02ZaVdKou0612lhJCGOkIN26ybSdUHzXYSbiHE0IQQgon/TLt4SBepJO13H9xj1Q0Tz52ZM565P79f0ujcc+65v/P9+Xg+Pv7dc+8vVYUkqR3/ZKMLkCT1y2CXpMYY7JLUGINdkhpjsEtSYy4+nwe76qqravfu3efzkJI09R599NG/qqqtk+5/XoN99+7dzM/Pn89DStLUS/LtlezvUIwkNcZgl6TGGOyS1BiDXZIaY7BLUmMmCvYkv5rka0keT/LZJJcluTbJI0meTPK5JJeud7GSpOUtG+xJdgK/AsxW1ZuAi4BbgE8Cd1TVHuB7wK3rWagkaTKTDsVcDLwyycXA5cBx4Abg3u75Q8DN/ZcnSVqpZYO9qr4L/AbwLONAXwQeBU5X1YvdbseAnUu9PsmBJPNJ5hcWFvqpWk3avn0XSS64n+3bd230H70as+wnT5NcAewDrgVOA58H9i6x65IzdlTVQeAgwOzsrLN66GWdPPld4PaNLuO8O3ny9o0uQY2ZZCjm7cC3qmqhql4A7gN+GpjphmYAdgHPrVONkqQVmCTYnwWuT3J5kgA3Ak8ADwHv6fbZDxxenxIlSSsxyRj7I4zfJH0M+Gr3moPAR4APJXkKeA1w5zrWKUma0ETf7lhVHwc+/pLNTwPX9V6RJGlN/OSpJDXGYJekxhjsktQYg12SGmOwS1JjDHZJasx5ncxaWpsHgBM9t7mdpb8hQ5peBrumyAm2bDnNYDDopbXRaMTiYi9NSZuKwa6pMhgMmJub66Wt4XDIww8/00tb0mbiGLskNcZgl6TGGOyS1BiDXZIaY7BLUmMMdklqjMEuSY1ZNtiTvD7J6Kyf7yf5YJIrkzyY5MluecX5KFiSdG6TTI33jaoaVNUA+OfAD4AvALcBR6pqD3CkW5ckbbCVDsXcCHyzqr4N7AMOddsPATf3WZgkaXVWGuy3AJ/tHm+rquMA3fLqpV6Q5ECS+STzCwsLq69UkjSRiYM9yaXATcDnV3KAqjpYVbNVNbt169aV1idJWqGVXLHvBR6rqpPd+skkOwC65am+i5MkrdxKgv19/MMwDMD9wP7u8X7gcF9FSZJWb6JgT3I58A7gvrM2fwJ4R5Inu+c+0X95kqSVmuj72KvqB8BrXrLtrxnfJSNJ2kScaENTZTQaMRwOe2sLZnppS9pMDHZNke0sLtLjrEczjOc8ldpisGuKOOm0NAm/BEySGmOwS1JjDHZJaozBLkmNMdglqTHeFaMp8gBwouc2t+PdNmqNwa4pcoItW04zGAx6aW00GrG42EtT0qZisGuqDAYD5ubmemlrOBz2+GEnafNwjF2SGmOwS1JjDHZJaozBLkmNMdglqTGTzqA0k+TeJF9PcjTJTyW5MsmDSZ7sllesd7GSpOVNesX+KeBLVfUTwJuBo8BtwJGq2gMc6dYlSRts2WBP8mrgZ4A7Aarqh1V1GtgHHOp2OwTcvF5FSpImN8kV++uABeB3k3w5yWeSvArYVlXHAbrl1Uu9OMmBJPNJ5hcWFnorXJK0tEmC/WLgrcCnq+otwP9jBcMuVXWwqmaranbr1q2rLFOSNKlJgv0YcKyqHunW72Uc9CeT7ADolqfWp0RJ0kosG+xVdQL4TpLXd5tuBJ4A7gf2d9v2A4fXpUJJ0opM+iVgvwzcleRS4Gng3zL+R+GeJLcCzwLvXZ8SJUkrMVGwV9UImF3iqRv7LUeStFZ+8lSSGmOwS1JjDHZJaowzKGmqjEYjhsNhb23BTC9tSZuJwa4psp3FRXqczm6G8WTWUlsMdk2RvRtdgDQVHGOXpMYY7JLUGINdkhpjsEtSY3zzVFPkAeBEz21uxzdl1RqDXVPkBFu2nGYwGPTS2mg0YnGxl6akTcVg11QZDAbMzc310tZwOOzxnnhp83CMXZIaY7BLUmMmGopJ8gzwPPB3wItVNZvkSuBzwG7gGeDnq+p761OmJGlSK7li/1dVNaiqMxNu3AYcqao9wBFWMMG1JGn9rGUoZh9wqHt8CLh57eVIktZq0mAv4I+SPJrkQLdtW1UdB+iWVy/1wiQHkswnmV9YWFh7xZKkc5r0dse3VdVzSa4GHkzy9UkPUFUHgYMAs7OztYoaJUkrMNEVe1U91y1PAV8ArgNOJtkB0C1PrVeRkqTJLRvsSV6V5MfPPAZ+FngcuB/Y3+22Hzi8XkVKkiY3yVDMNuALSc7s/3tV9aUkfw7ck+RW4FngvetXpiRpUssGe1U9Dbx5ie1/Ddy4HkVJklbPT55KUmMMdklqjMEuSY0x2CWpMQa7JDXGYJekxjiDkqbKaDRiOBz21hbM9NKWtJkY7Joi21lcpMfp7GYYT2YttcVg1xTZu9EFSFPBMXZJaozBLkmNMdglqTEGuyQ1xjdPNUUeAE703OZ2fFNWrTHYNUVOsGXLaQaDQS+tjUYjFhd7aUraVAx2TZXBYMDc3FwvbQ2Hwx7viZc2j4nH2JNclOTLSb7YrV+b5JEkTyb5XJJL169MSdKkVvLm6QeAo2etfxK4o6r2AN8Dbu2zMEnS6kwU7El2AT8HfKZbD3ADcG+3yyHg5vUoUJK0MpNesf8W8GvA33frrwFOV9WL3foxYOdSL0xyIMl8kvmFhYU1FStJWt6ywZ7k3cCpqnr07M1L7FpLvb6qDlbVbFXNbt26dZVlSpImNcldMW8DbkryLuAy4NWMr+BnklzcXbXvAp5bvzIlSZNa9oq9qj5aVbuqajdwC/DHVfV+4CHgPd1u+4HD61alJGlia/lKgY8AH0ryFOMx9zv7KUmStBYr+oBSVc0Bc93jp4Hr+i9JkrQWfgmYJDXGYJekxhjsktQYg12SGmOwS1JjDHZJaozBLkmNMdglqTHOoKSpMhqNGA6HvbUFM720JW0mBrumyHYWF+lxOrsZxpNZS20x2DVF9m50AdJUcIxdkhpjsEtSYwx2SWqMwS5JjfHNU02RB4ATPbe5Hd+UVWuWDfYklwF/Aryi2//eqvp4kmuBu4ErgceAX6iqH65nsbrQnWDLltMMBoNeWhuNRiwu9tKUtKlMcsX+t8ANVfU3SS4B/jTJA8CHgDuq6u4kvw3cCnx6HWuVGAwGzM3N9dLWcDjs8Z54afOYZDLrqqq/6VYv6X4KuAG4t9t+CLh5XSqUJK3IRG+eJrkoyQg4BTwIfBM4XVUvdrscA3a+zGsPJJlPMr+wsNBHzZKkc5go2Kvq76pqAOxiPIH1G5ba7WVee7CqZqtqduvWrauvVJI0kRXd7lhVp4E54HpgJsmZMfpdwHP9liZJWo1lgz3J1iQz3eNXAm8HjgIPAe/pdtsPHF6vIiVJk5vkrpgdwKEkFzH+h+CeqvpikieAu5P8R+DLwJ3rWKckaULLBntVfQV4yxLbn2Y83i5J2kT8SgFJaozBLkmNMdglqTEGuyQ1xmCXpMYY7JLUGINdkhpjsEtSYwx2SWqMwS5JjXHOU02V0WjEcDjsrS2Y6aUtaTMx2DVFtrO4SI/T2c0wnsxaaovBrimyd6MLkKaCY+yS1BiDXZIaM8kMSq9N8lCSo0m+luQD3fYrkzyY5MluecX6lytJWs4kV+wvAh+uqjcwnuv0F5O8EbgNOFJVe4Aj3bokaYNNMoPSceB49/j5JEeBncA+YNjtdojxJNcfWZcqJQBuP4/tPgCc6Pk42/ENYJ0PK7orJsluxtPkPQJs60Kfqjqe5OqXec0B4ADANddcs5ZaJbZs2cJgMOilrdFoxOLi4ss8e4ItW073fKxempKWNXGwJ/kx4PeBD1bV95NM9LqqOggcBJidna3VFCmdMRgMmJub66Wt4XDIww8/fB6P9UwvbUnLmeiumCSXMA71u6rqvm7zySQ7uud3AKfWp0RJ0kpMcldMgDuBo1X1m2c9dT+wv3u8Hzjcf3mSpJWaZCjmbcAvAF9NMuq2/TrwCeCeJLcCzwLvXZ8SJUkrMcldMX8KvNyA+o39liNJWis/eSpJjTHYJakxBrskNcZgl6TGGOyS1BiDXZIaY7BLUmMMdklqjMEuSY0x2CWpMQa7JDXGYJekxhjsktSYFU2NJ2200WjEcDjsra3ze6yZXtqSlmOwa6osLi6eczq7/mxncZEep7ObYTyZtbT+DHZNkdvP47H2nsdjSf2aZGq830lyKsnjZ227MsmDSZ7sllesb5mSpElN8ubpfwfe+ZJttwFHqmoPcKRblyRtAssGe1X9CfB/X7J5H3Coe3wIuLnnuiRJq7Ta2x23VdVxgG559cvtmORAkvkk8wsLC6s8nCRpUut+H3tVHayq2aqa3bp163ofTpIueKsN9pNJdgB0y1P9lSRJWovV3u54P7Af+ES3PNxbRVKPLsl/5oV6fh3a/XFeqA/33q7Uh2WDPclngSFwVZJjwMcZB/o9SW4FngXeu55FSqv1Qj3PXW98Y+/tvv+JJ3pvU+rLssFeVe97madu7LkWSVIP/BIwSWqMwS5JjTHYJakxBrskNcZgl6TGGOyS1BiDXZIaY7BLUmMMdklqjMEuSY0x2CWpMQa7JDXGYJekxhjsktQYg12SGmOwS1Jj1hTsSd6Z5BtJnkpyW19FSZJWb9XBnuQi4L8Ce4E3Au9L0v8cZJKkFVnLFft1wFNV9XRV/RC4G9jXT1mSpNVads7Tc9gJfOes9WPAv3jpTkkOAAcArrnmmjUcTq3btm0nJ0/e3mublyTrMvH0JQkv1O29tLVt285e2pHOWEuwZ4lt9SMbqg4CBwFmZ2d/5HnpjBMnjm10CVIT1jIUcwx47Vnru4Dn1laOJGmt1hLsfw7sSXJtkkuBW4D7+ylLkrRaqx6KqaoXk/wS8L+Ai4Dfqaqv9VaZJGlV1jLGTlX9IfCHPdUiSeqBnzyVpMYY7JLUGINdkhpjsEtSY1J1/j4zlGQB+PZ5O+DkrgL+aqOLWCP7sHm00I8W+gBt9OMq4FVVtXXSF5zXYN+sksxX1exG17EW9mHzaKEfLfQB2ujHavrgUIwkNcZgl6TGGOxjBze6gB7Yh82jhX600Adoox8r7oNj7JLUGK/YJakxBrskNeaCD/Yk/z5JJbmqW0+S/9JN0P2VJG/d6BrPJcl/SvL1rtYvJJk567mPdv34RpJ/vZF1LmcaJ0ZP8tokDyU5muRrST7Qbb8yyYNJnuyWV2x0rctJclGSLyf5Yrd+bZJHuj58rvtq7k0tyUySe7vfh6NJfmrazkWSX+3+Lj2e5LNJLlvNubiggz3Ja4F3AM+etXkvsKf7OQB8egNKW4kHgTdV1T8D/hL4KEA3sfgtwE8C7wT+WzcB+aYzxROjvwh8uKreAFwP/GJX923AkaraAxzp1je7DwBHz1r/JHBH14fvAbduSFUr8yngS1X1E8CbGfdnas5Fkp3ArwCzVfUmxl+HfgurOBcXdLADdwC/xj+e0m8f8D9q7M+AmSQ7NqS6CVTVH1XVi93qnzGeyQrG/bi7qv62qr4FPMV4AvLNaConRq+q41X1WPf4ecZBspNx7Ye63Q4BN29MhZNJsgv4OeAz3XqAG4B7u12moQ+vBn4GuBOgqn5YVaeZsnPB+KvUX5nkYuBy4DirOBcXbLAnuQn4blX9xUueWmqS7mmZbfjfAQ90j6epH9NU65KS7AbeAjwCbKuq4zAOf+DqjatsIr/F+ALn77v11wCnz7pgmIbz8TpgAfjdbkjpM0lexRSdi6r6LvAbjEcQjgOLwKOs4lysaaKNzS7J/wa2L/HUx4BfB352qZctsW1D7wk9Vz+q6nC3z8cYDw3cdeZlS+y/We9tnaZaf0SSHwN+H/hgVX1/fME7HZK8GzhVVY8mGZ7ZvMSum/18XAy8FfjlqnokyafYxMMuS+nG//cB1wKngc8zHp58qWXPRdPBXlVvX2p7kn/K+A/vL7pfwl3AY0muYxNO0v1y/TgjyX7g3cCN9Q8fTNh0/TiHaar1H0lyCeNQv6uq7us2n0yyo6qOd8N4pzauwmW9DbgpybuAy4BXM76Cn0lycXelOA3n4xhwrKoe6dbvZRzs03Qu3g58q6oWAJLcB/w0qzgXF+RQTFV9taqurqrdVbWb8V+Kt1bVCcYTcv+b7u6Y64HFM/+V24ySvBP4CHBTVf3grKfuB25J8ook1zJ+M/j/bESNE5jKidG7seg7gaNV9ZtnPXU/sL97vB84fL5rm1RVfbSqdnW/B7cAf1xV7wceAt7T7bap+wDQ/e5+J8nru003Ak8wReeC8RDM9Uku7/5unenDys9FVV3wP8AzwFXd4zC+Q+ObwFcZv0O94TWeo/anGI9Pj7qf3z7ruY91/fgGsHeja12mH+9ifFfPNxkPMW14TRPU/C8Z/7f4K2f9+b+L8Rj1EeDJbnnlRtc6YX+GwBe7x69jfCHwFOMhgVdsdH0T1D8A5rvz8QfAFdN2LoD/AHwdeBz4n8ArVnMu/EoBSWrMBTkUI0ktM9glqTEGuyQ1xmCXpMYY7JLUGINdkhpjsEtSY/4/XqvuDkgTPy0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.axes()\n",
    "square = plt.Rectangle((0,0), 25, 80, fc='navy',ec=\"black\")\n",
    "plt.gca().add_patch(square)\n",
    "door = plt.Rectangle((8.3,0), 9, 9, fc='brown',ec=\"black\")\n",
    "plt.gca().add_patch(door)\n",
    "window1 = plt.Rectangle((3.5,12), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window1)\n",
    "window2 = plt.Rectangle((3.5,23), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window2)\n",
    "window3 = plt.Rectangle((3.5,34), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window3)\n",
    "window4 = plt.Rectangle((3.5,45), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window4)\n",
    "window5 = plt.Rectangle((3.5,56), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window5)\n",
    "window6 = plt.Rectangle((3.5,67), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window6)\n",
    "window7 = plt.Rectangle((14.5,12), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window7)\n",
    "window8 = plt.Rectangle((3.5,12), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window8)\n",
    "window9 = plt.Rectangle((3.5,12), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window9)\n",
    "window10 = plt.Rectangle((3.5,12), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window10)\n",
    "window11 = plt.Rectangle((3.5,12), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window11)\n",
    "window12 = plt.Rectangle((3.5,12), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window12)\n",
    "\n",
    "\n",
    "plt.axis('equal')\n",
    "\n",
    "#triangle\n",
    "#pts = np.array([[0,20], [25,20], [12.5,22]])\n",
    "#p = Polygon(pts, closed=False, fc='brown')\n",
    "#ax = plt.gca()\n",
    "ax.add_patch(p)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Fachada da casa***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.axes()\n",
    "square = plt.Rectangle((0,0), 25, 20, fc='navy',ec=\"black\")\n",
    "plt.gca().add_patch(square)\n",
    "door = plt.Rectangle((15,0), 4.5, 9, fc='brown',ec=\"black\")\n",
    "plt.gca().add_patch(door)\n",
    "doorhandle1 = plt.Rectangle((15.5,3.7), 2, 0.3, fc='black',ec=\"black\")\n",
    "plt.gca().add_patch(doorhandle1)\n",
    "doorhandle2 = plt.Rectangle((17.2,3.3), 0.3, 0.8, fc='black',ec=\"black\")\n",
    "plt.gca().add_patch(doorhandle2)\n",
    "window = plt.Rectangle((3.5,4), 8, 8, fc='white',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(window)\n",
    "windowdetail1 = plt.Rectangle((7.3,4), 0.2, 8, fc='black',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(windowdetail1)\n",
    "windowdetail2 = plt.Rectangle((3.5,7.8), 8, 0.2, fc='black',ec=\"black\", linewidth=1.5)\n",
    "plt.gca().add_patch(windowdetail2)\n",
    "plt.axis('equal')\n",
    "\n",
    "#triangle\n",
    "pts = np.array([[0,20], [25,20], [12.5,25]])\n",
    "p = Polygon(pts, closed=False, fc='brown')\n",
    "ax = plt.gca()\n",
    "ax.add_patch(p)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 02/04 exercicios***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Considerando a sequência $$1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{8}, \\frac{1}{16}, \\cdots, \\frac{1}{2^n}$$\n",
    "Escreva uma função em Python que *some as $n$ primeiras parcelas* da sequência para cada um dos modelos computacionais citados a seguir.\n",
    "  - `while`\n",
    "  - `for`\n",
    "  - `map`, `reduce`\n",
    "  - `reduce`, `list comprehension`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***For***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "numero = 1\n",
    "def number(n):\n",
    "    for i in [1 / 2**n in range(1,n)]:\n",
    "        numero = numero + i"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***While***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "contador = 1\n",
    "def number(n):\n",
    "    while contador <= n:\n",
    "        return 1/2**x\n",
    "        contador = contador + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***List Comprehension***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def numero(n):\n",
    "    [1 / 2**x  for x in range(1,n)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Reduce***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import functools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 0\n",
    "def number(n):\n",
    "    functools.reduce(lambda n,x: n + x, (filter (lambda n: x <= n, (map(lambda n: n + 1, [1/2**x])))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coeficiente Diferencial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## O Problema da Tangente"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Como medir a velocidade com que processos variam?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para *processos que variam continuamente*, a *velocidade de variação* pode ser medida pela ***inclinação da reta tangente à curva que representa o processo***.\n",
    "\n",
    "Quanto maior a variação do processo, maior será a abertura do ângulo que a reta tangente forma com o eixo horizontal. Reciprocamente, quanto menor a variação, menor será a abertura do ângulo da tangente.\n",
    "\n",
    "A abertura do ângulo é medida por meio da *tangente trigonométrica* que a reta tangente forma com o eixo horizontal (em geral eixo X)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Secantes e tangentes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "X = np.linspace(-0, 11, 100) #, endpoint=True)\n",
    "\n",
    "# fplot = lambda x: 8*quadrado(x)\n",
    "fplot = lambda x: x**3\n",
    "\n",
    "Fm = [fplot(x) for x in X]\n",
    "\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('Y')\n",
    "\n",
    "plt.grid(True, linestyle='-.')\n",
    "\n",
    "plt.title(\"Coeficiente diferencial\")\n",
    "\n",
    "plt.plot(X, Fm, color=\"red\", linewidth=2.0, linestyle=\"-\")\n",
    "\n",
    "a = 2\n",
    "for i in [6, 8, 10]:\n",
    "  plt.plot([a, i], [fplot(a), fplot(i)], color=\"blue\", linewidth=1.0, linestyle=\"-\")\n",
    "  plt.plot([a, i], [fplot(a), fplot(a)], color=\"blue\", linewidth=1.0, linestyle=\"-.\")\n",
    "  plt.plot((i, i), (fplot(a), fplot(i)), color=\"blue\", linewidth=1.0, linestyle=\"-.\")\n",
    "\n",
    "plt.savefig(\"multiplas_partes.png\", dpi=72)\n",
    "\n",
    "# Show result on screen\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para determinar *tangentes a uma curva*, utiliza-se o *coeficiente diferencial*, definido pela expressão:\n",
    "\n",
    "$$\\frac{f(a+h) - f(a)}{h}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Derivadas de funções reais"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Abordaremos as *derivadas de funções reais* do tipo $f: \\mathbb{R} \\rightarrow \\mathbb{R}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definição de derivada"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A derivada em um ponto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A derivada de uma função $f$ em um número real $a$, denotada por $f'(a)$, é\n",
    "\n",
    "$$f'(a) = \\displaystyle\\lim_{h\\rightarrow 0}\\frac{f(a+h) - f(a)}{h}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercícios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Encontre a derivada da função $f(x) = x^2 +2$ em um ponto $x = a$.\n",
    "1. Encontre a derivada da função $f(x) = x^3$ em um ponto $x = a$.\n",
    "1. Encontre a derivada da função $f(x) = x^2 - 8x + 1$ em um ponto $x = a$.\n",
    "1. Mostre que a derivada de uma função $f$ em um ponto $a$ pode ser equivalentemente definida por\n",
    "\n",
    "$$f'(a) = \\displaystyle\\lim_{x\\rightarrow a}\\frac{f(x) - f(a)}{x-a}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A derivada como função"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Já conhecemos a derivada $f'(a)$ de uma função $f(x)$ em um ponto $a$. Agora, vamos fazer o valor de $a$ variar.\n",
    "\n",
    "Caso deixemos $a$ *livre*, a derivada de $f(x)$ é definida como\n",
    "\n",
    "$$f'(x) = \\displaystyle\\lim_{x\\rightarrow 0}\\frac{f(x+h) - f(x)}{h}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$f(x) = x^2$\n",
    "\n",
    "$y' = f'(x) = 2x$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Se deixarmos o ponto $a$ livre, ou seja, sem fixar $x=a$, encontre uma fórmula para $f'(x)$, dada a função $f(x) = x^3 - x$, .\n",
    "\n",
    "1. Como no exercício anterior, encontre uma fórmula para $f'(x)$ se $f(x) = x^2 -8x +1$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interpretação física das derivadas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No caso em que a função $f$ representa o *deslocamento* de um corpo ao longo do *tempo*, a derivada $f'(x)$ é uma função que determina a *velocidade instantânea* do corpo no ponto $x$, em que $x$ é o deslocamento do corpo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercício"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Dada a função $x^3 - x$, encontre uma fórmula para $f'(x)$.\n",
    "1. Esboce o gráfico de $f$ e $f'$ do exemplo acima. Relacione os gráficos dessas funções nas situações em que a derivada $f'(x)$ é *nula*, *positiva* e *negativa*.\n",
    "1. Realize as mesmas ações dos exercícios anteriores para $f(x)=x^3+2x^2-x-2$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matemática Simbólica"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "import sympy as sym\n",
    "from sympy import *\n",
    "\n",
    "from IPython.display import display\n",
    "\n",
    "from sympy.interactive import printing\n",
    "printing.init_printing()\n",
    "\n",
    "x, y, z, h = symbols(\"x y z h\")\n",
    "a, b, k, m, n = symbols(\"a b k m n\", integer=True)\n",
    "f, g = map(Function, 'fg')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "quadratica = x**2\n",
    "diff(quadratica, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cubica = x**3\n",
    "diff(x**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "quart = x**4\n",
    "diff(quart)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$f(x) = x^2 \\mapsto f'(x) = 2x$\n",
    "\n",
    "$f(x) = x^3 \\mapsto f'(x) = 3x^2$\n",
    "\n",
    "$f(x) = x^4 \\mapsto f'(x) = 4x^3$\n",
    "\n",
    "$f(x) = x^5 \\mapsto f'(x) = 5x^4$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$f(x) = x^5 - 2x^3 + x^2 + x^1 - 4 \\ \\mapsto f'(x) = 5x^4 - 6x^2 + 2x + 1$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $f(x) = x^n \\mapsto nx^{n-1}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# seno = sin(x)\n",
    "diff(sin(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diff(sin(x)), diff(sin(diff(sin(x)))), diff(sin(diff(sin(diff(sin(x))))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 23/04***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.5,\n",
       " 3.75,\n",
       " 2.6666666666666665,\n",
       " 6.857142857142857,\n",
       " 4.8,\n",
       " 3.75,\n",
       " 5.833333333333333,\n",
       " 6.857142857142857,\n",
       " 7.875,\n",
       " 8.88888888888889]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values = [2,4,3,7,5,4,6,7,8,9]\n",
    "list(map(lambda x: ((x**2)-1)/x,values)) # iterador"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0,\n",
       " -1.5,\n",
       " -2.6666666666666665,\n",
       " -3.75,\n",
       " -4.8,\n",
       " -5.833333333333334,\n",
       " -6.857142857142858,\n",
       " -7.875,\n",
       " -8.88888888888889,\n",
       " -9.899999999999999,\n",
       " -10.909090909090908,\n",
       " -11.916666666666668,\n",
       " -12.923076923076922,\n",
       " -13.92857142857143,\n",
       " -14.933333333333334,\n",
       " -15.9375,\n",
       " -16.941176470588236,\n",
       " -17.944444444444446,\n",
       " -18.947368421052634,\n",
       " -19.95,\n",
       " -20.952380952380953,\n",
       " -21.954545454545453,\n",
       " -22.956521739130434,\n",
       " -23.958333333333332,\n",
       " -24.959999999999997,\n",
       " -25.96153846153846,\n",
       " -26.962962962962965,\n",
       " -27.964285714285715,\n",
       " -28.96551724137931,\n",
       " -29.96666666666667,\n",
       " -30.967741935483872,\n",
       " -31.96875,\n",
       " -32.96969696969697,\n",
       " -33.97058823529412,\n",
       " -34.971428571428575,\n",
       " -35.97222222222223,\n",
       " -36.97297297297297,\n",
       " -37.973684210526315,\n",
       " -38.97435897435897,\n",
       " -39.975,\n",
       " -40.97560975609756,\n",
       " -41.97619047619048,\n",
       " -42.97674418604651,\n",
       " -43.97727272727273,\n",
       " -44.977777777777774,\n",
       " -45.97826086956522,\n",
       " -46.97872340425532,\n",
       " -47.97916666666667,\n",
       " -48.9795918367347,\n",
       " -49.980000000000004,\n",
       " -50.98039215686274,\n",
       " -51.980769230769226,\n",
       " -52.9811320754717,\n",
       " -53.98148148148149,\n",
       " -54.981818181818184,\n",
       " -55.98214285714286,\n",
       " -56.982456140350884,\n",
       " -57.98275862068966,\n",
       " -58.983050847457626,\n",
       " -59.983333333333334,\n",
       " -60.983606557377044,\n",
       " -61.983870967741936,\n",
       " -62.98412698412699,\n",
       " -63.984375,\n",
       " -64.98461538461538,\n",
       " -65.98484848484848,\n",
       " -66.98507462686568,\n",
       " -67.98529411764706,\n",
       " -68.98550724637681,\n",
       " -69.9857142857143,\n",
       " -70.98591549295774,\n",
       " -71.98611111111111,\n",
       " -72.98630136986301,\n",
       " -73.98648648648648,\n",
       " -74.98666666666666,\n",
       " -75.98684210526316,\n",
       " -76.98701298701297,\n",
       " -77.98717948717949,\n",
       " -78.9873417721519,\n",
       " -79.9875,\n",
       " -80.98765432098766,\n",
       " -81.98780487804878,\n",
       " -82.98795180722891,\n",
       " -83.98809523809524,\n",
       " -84.98823529411764,\n",
       " -85.98837209302326,\n",
       " -86.98850574712644,\n",
       " -87.98863636363636,\n",
       " -88.98876404494382,\n",
       " -89.98888888888888,\n",
       " -90.98901098901098,\n",
       " -91.98913043478261,\n",
       " -92.98924731182795,\n",
       " -93.98936170212767,\n",
       " -94.98947368421052,\n",
       " -95.98958333333334,\n",
       " -96.9896907216495,\n",
       " -97.98979591836735,\n",
       " -98.98989898989898,\n",
       " -99.99,\n",
       " -100.99009900990099,\n",
       " -101.99019607843137,\n",
       " -102.99029126213593,\n",
       " -103.99038461538461,\n",
       " -104.99047619047617,\n",
       " -105.99056603773585,\n",
       " -106.99065420560748,\n",
       " -107.99074074074075,\n",
       " -108.99082568807339,\n",
       " -109.9909090909091,\n",
       " -110.990990990991,\n",
       " -111.99107142857143,\n",
       " -112.99115044247787,\n",
       " -113.99122807017544,\n",
       " -114.99130434782609,\n",
       " -115.99137931034483,\n",
       " -116.99145299145299,\n",
       " -117.99152542372882,\n",
       " -118.99159663865547]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values = [1/i for i in range(1,120)]\n",
    "list(map(lambda x: (((x**2)-1)/x),values))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Derivadas de Funções Reais\n",
    "serão abordadas as derivadas das funções $f: \\mathbb{R} \\rightarrow \\mathbb{R}$\n",
    "\n",
    "Definição de Derivada\n",
    "A derivada de um ponto\n",
    "\n",
    "a derivada de uma função $f$ em um numero real $a$ denotada por $f'(a)$ é:\n",
    "\n",
    "$\\displaystyle f'(a) = lim_{h \\rightarrow 0}\\frac{f(a+h-f(a)}{h}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A derivada é o estudo das funções contínuas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "import sympy as sym\n",
    "from sympy import *\n",
    "\n",
    "from IPython.display import display\n",
    "\n",
    "from sympy.interactive import printing\n",
    "printing.init_printing()\n",
    "\n",
    "x, y, z, h = symbols(\"x y z h\")\n",
    "a, b, k, m, n = symbols(\"a b k m n\", integer=True)\n",
    "f, g = map(Function, 'fg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABsAAAASCAYAAACq26WdAAAABHNCSVQICAgIfAhkiAAAAa9JREFUOI291U1IFlEUxvGf6bJdi9pFOwPJbYsCI0pskWCEtDAXugiCiiIqURii4IUEC4MCXRTtomjRB5mhRNEiCgoqIgoiBKUiaKPQp4t7heE27/hR+MAwh3Oemf/MvWfO1GRZZrm0IhevQjdu4B1m8A2P0JV4l6S6XLwbFzCJcXzEarRhGC3R8+d/wN5iJ27jdy7fgyfYFcHXlwrLL80YbiYgmMLFGDcltXvCm7Yl+RpcirVKEaxMP+L5Z5I/Gh/uFGpz+X50YgjHFwOrw94Y301qL3AF69ERcz04jKvYl95oPlXQgDsYKaj3oh0ZVuJ09HVItmS+NzuAI3iTe/JUEziLtRjEY2EPv6fGMth+nMNrbMHXEu/nXNyF6SJTNdghnMfLCJoqAe0RGmLOc7CasQh2DAN4HkGfSkA7cBmvsEFY7m7ULwTWJzTEM2zFlxLQJlwT9my7sJR9QtNVii7Id2MnTuIXHgrNkeqD8LE24pYwO7cJI06EP0UrNsf7FMLWxXOtsGdFeiAM5hFhOjTjfeI5gVGcwcZqsCweC9Gaktp9YVz9pX/+bSxGywqbBR3kXQn4g2e4AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 2 x$"
      ],
      "text/plain": [
       "2⋅x"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quadratica = x**2\n",
    "diff(quadratica, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACMAAAAWCAYAAABKbiVHAAAABHNCSVQICAgIfAhkiAAAAjpJREFUSInt1l1ojmEYB/DfzJmvQiyRElmIklIML8tI+ciZMhRKHIgoVvIqKzLlo3YyBz5yopWDOfAxKUqKwkIKyUfZWiZaSGYO7nt5e/a8tjHjwFVv93P/7+u+7/9zXf/ret6CbDbrX7F+fXzfbtzGBzSjDlP+FpkMqjELC/AV9RgK/fuYzKLEvBzvMRt1ycgcxFW8wie04C72YtgfIDdIyE4LndO0DQNwBUdxVghlFg0Y08tkjuAebtE5TYPxOWVTJSoEAW7uJSKHMBdz0EbnyKQRgXNxnJDAL6MdKxN4AU7GtQMp5x3GGpTiaQfY3WpaGseGBL4T37AfhTl4FdaiBrsSe45hNebjUe5CvmragYEYghkoiUSSb3kfZ+LF5UI0KrBdiOamhH91JLJCEG1RxFvRWpCnAzdiZM78ItahKcV3NJ7EtSocxyUsw5eEb3vaZdiHbL40FQl5LxL0ME4o8ekpvq+FqhgbidyMe5JExDPTflm61kwTzqNM6DOn8/g15zyvx8cuzk217gr4hSC2yRieWFslpKcxzrf+CpGekIFRcWzLwZbgFB5iKh5jA4p/l0yxH+pO+lRihKCHdxEvQa2gmTIhVXuECk3rLV1abmkvFrridTzDW6Gi5gkCbsTG6DsNF4SP3EK8iXgt7mC50Flv9IRMYSaT6XhuFaIwETOF7jheePMaoZe8jNg1ocmVCqnJtedCd52EEz0hkxuZB9jSjT1Ppaezw+qFcu2x9fWfq5/afzL57DsI1HUrE/CvpAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle 3 x^{2}$"
      ],
      "text/plain": [
       "   2\n",
       "3⋅x "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cubica = x**3\n",
    "diff(x**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAABHNCSVQICAgIfAhkiAAAAf9JREFUSInt1s2LTXEcx/HXHbOwmD/ARllITXkmUaOkEBam2WgWQixIIaUMhrsYmULNNBs1xHjYMAvKhoXFJDYWHlKIjaYoWXgcLGYsvr/TXId777imofjU6Zzf7/c93/M+v+/DOYVisehvUt0EP28HHuBdOu5g7Z8EGsQ+LMBC3MQVzM4M6icY6GpufADbsUTsXNUd2oCRdGwdZ7hJaEUDbmeTlXZoKnrwId00Xpolcmcy3qMZD7PFcjtUwBm8wclxhIEnmIvFyfc5zKwGtBPLsRkfKzi/IcLZkpsv4Gxa68ytfcUz3EUb7mF3JaDG5KQbAxVgYC+G0SFyItNxbESvqKpKqhPh+ylQPc7jBfZXcQT3k32jKADpvj24hG05+04sxTSRS0exDBdLAUp1CPPQhKExAMFBrEdRJP8RXE+AwznbKbiQzm9Fqa9O9j8ALUpvd0JUwVg1iC4Rmh5Rwi0iV/LaVM1ZFrIsVE/R/gswmV6XXG/Bpxp8fAfUgBkiFz4bbYYjOJxsetO4K+ejVSTxqzTeVSsMoyH7gtNlbOaLvLolekhpONegD49EmxgQHb0bj38HaEj5T0MxAfXhVMl8E/pFDq0UYWvHZVFNzbUA1fq1n4NrolJW4GWa7xcNb50o7wkBmi7KdASr8Dy33pbOx2oBKvzrf4xV9R+omr4B3MpsElry2aUAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle 4 x^{3}$"
      ],
      "text/plain": [
       "   3\n",
       "4⋅x "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quart = x**4\n",
    "diff(quart)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\displaystyle 4 x^{3}$\n",
    "$f(x) = x^2 \\mapsto f'(x) = 2x$\n",
    "\n",
    "$f(x) = x^3 \\mapsto f'(x) = 3x^2$\n",
    "\n",
    "$f(x) = x^4 \\mapsto f'(x) = 4x^3$\n",
    "\n",
    "$f(x) = x^5 \\mapsto f'(x) = 5x^4$\n",
    "\n",
    "$f(x) = x^5 - 2x^3 + x^2 + x^1 - 4 \\ \\mapsto f'(x) = 5x^4 - 6x^2 + 2x + 1$\n",
    "\n",
    "$f(x) = x^n \\mapsto nx^{n-1}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAD4AAAAVCAYAAAAeql2xAAAABHNCSVQICAgIfAhkiAAAA89JREFUWIXl2HmIllUUBvDfOJWZgdJYGIYVSJZEE2aLkC0w2kqFgRQkkUtatEAbGQpD2SSVFRUZbZSRWSg2tDG2SGbRYrRntFCaZmmUJtZYlv1x7tvceeeb+aAx+qAHhvNy7r3nnnPPOc+939Q1Nzf7P6LPf+1AD5iPDejfCxtHYAcmlwdqNfBROA9zsLUXdt7BU5iNPfOBWg28BT9j3k6wdRMG47JcWYuBH4QmPIlfd4K9t/AppqG+UFYK/Cg8gXXYhvVYigmleROwHJuTgx9iBvp248AZeCnZ24Zv8QouLs2bhLrkQyUsFX07vqSvw8NpbE5pbCGGigNF18Cn4nWcleRcPIt9Sg62JMcOwQLcnTZuQRt2Ldm9EK0YgaeT3efQDxeU5jbhD7zRNWZwNf4UfVuf6W/F+bgf15bWvJbk2EKxSzY4AveI3hqDj0uL90tytMjsN6I6vkv6GViC05NzLdnaafgNjYKpcwzKvvvjcKzSPam9j0dFkBNFlq/DFaI9pldY83aSxxWKPOMXiYO4QdegYW2Sk5KcrSNo2I4rRTamVFi/Hb9X0P+QfQ8RWVxfYV6OmWhHMy7BjaLSJqb9y9ic5g8tFHngxyT5fJVNRyb5coWxz8QBHYiBmf4x7CEO9HbRSntXWN+Q5E9VfFiLO7A/7hJtOV5UVXf4UVZdeeCFo+uqbDogye6ysr40D24TpblGXCtL8D2WiTu7QMHiu1fxATZm35PxS5X5/TL7nQLflOSQKgY2Jzm4m/F9S/MKzBdV1YDT8KDouTZBnnT0f4Oeca4gs6LVLq8yv49I7IZcUaBg0VOqGHk3yRMqjA0TJPiVjoMsY5Ng9KmCmPYSZEpUy0YM72H/U/GIaJvDxB09BQf3sGa4uHXeKxR54PMEAc0SDF9GweoPJTlT5z6tF1noI7KZ42Sdb5ACRaaLMt0h3gaDxCGWcSwWiR4fJw5pVrJdvrtzFPy1rFDkznwi7up7RVZb8bkou1HYghMFkdyMa/BRcmSrqJRDsQK3lDZeKFh1Bb4Wpz8GR4r39IvZ3MU4Gyfhi0zfiGdEC43VwSWLsBJnJpuvVgh8nHgbtBaKugo/S0fjqmRkoLhuPsADaZMC54irpFE8WL4Uj5m5Kcgc01MgjYIb2rEaj4tK25LN3U2Q4GocnXTDxKH1xfHJnxxNeAFv6shugQGCC9rEbdJt4LWAGeIBNFIHp/xTXIo7BZH+XQ21+COFuOvX4Ppe2uknDnGxUgvUauDt4hW2Uu/+EXEA7hOt2wmVmLZWsDz99QarxLO2C2o14/86/gLU3NmMKxfnAgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\cos{\\left(x \\right)}$"
      ],
      "text/plain": [
       "cos(x)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# seno = sin(x)\n",
    "diff(sin(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\displaystyle \\cos{\\left(x \\right)}$\n",
    "$$f(x) = x^5 - 2x^3 + x^2 + x - 6 \\mapsto 5x^{(5-1)} - 3*2X^{(3-1)} + 2x^{(2-1) x^1} - 6x^{0}\n",
    "$$\n",
    "$5x^4 - 6x^2 + 2x + 1$\n",
    "\n",
    "A derivada de uma constante é nula"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 07/05***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "X = np.linspace(-5,5,2000)\n",
    "# reta = 2*X # operação vetorizada\n",
    "# reta = [2*x for x in X]\n",
    "# reta = list(map(lambda x: 2*x),X)\n",
    "#parabola = X**2 # -10*X -20\n",
    "parabola = [x**2 for x in X]\n",
    "#parabola = list(map(lambda x: x**2,X))\n",
    "# derivada de X**2\n",
    "# 2*x**2-1\n",
    "der_parabola = [2*x for x in X]\n",
    "\n",
    "cubica = [x**3 for x in X]\n",
    "#cubica = X**3\n",
    "#cubica = list(map(lambda x: x**3,X))\n",
    "# derivada de X**3\n",
    "der_cubica = [3*(x**2) for x in X]\n",
    "# 3*x**3-1\n",
    "C = np.cos(X)\n",
    "\n",
    "# plot session\n",
    "plt.plot(X,parabola, color='brown')\n",
    "plt.plot(X,der_parabola, color='yellow')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(X,cubica, color='brown')\n",
    "plt.plot(X,der_cubica, color='yellow')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "der_seg_cubica = list(map(diff,der_cubica))\n",
    "plt.plot(X,der_seg_cubica, color='yellow')\n",
    "plt.plot(X,der_cubica, color ='brown')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Função: $f(x)= x^3$\n",
    "\n",
    "Derivada: $f'(x) = 3x^{3-1} \\rightarrow f'(x) = 3x^2$\n",
    "\n",
    "$f(-3) = -27$\n",
    "\n",
    "$f'(-3) = 27$\n",
    "\n",
    "$f(3)=27$\n",
    "\n",
    "$f'(3)=27$\n",
    "\n",
    "$f(0) = 0$\n",
    "\n",
    "$f'(0) = 0$\n",
    "\n",
    "Comportamento de Funções\n",
    "1.Função PAR: função par é aquela função que $f(x) = f(-x)$\n",
    "2.Função ÍMPAR: função ímpar é aquela função que $f(x) = -f(-x)$\n",
    "3.Conceito de função CRESCENTE: $x_1 &lt; x_2 \\rightarrow f(x_1) &lt; f(x_2)$\n",
    "4.Conceito de função DECRESCENTE: $x_1 &gt; x_2 \\rightarrow f(x_1) &gt; f(x_2)$\n",
    "Derivada de $x^2$ = $2x^{2-1}$\n",
    "\n",
    "Derivada de $x^3 = 3x^{3-1}$\n",
    "\n",
    "1.Quando a função é decrescente a derivada é negativa\n",
    "2.Quando a função é crescente a derivada é positiva\n",
    "Lista de Exercício\n",
    "Q1: Gere as sequências a seguir por meio de list comprehention"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\left[ 1.0, \\  0.5, \\  0.3333333333333333, \\  0.25, \\  0.2, \\  0.16666666666666666, \\  0.14285714285714285, \\  0.125, \\  0.1111111111111111\\right]$"
      ],
      "text/plain": [
       "[1.0, 0.5, 0.3333333333333333, 0.25, 0.2, 0.16666666666666666, 0.1428571428571\n",
       "4285, 0.125, 0.1111111111111111]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1/x for x in range(1,10)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 7.484470860550343$"
      ],
      "text/plain": [
       "7.484470860550343"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lambda x: x%\n",
    "sum([1/x for x in range(1,1000)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1\n",
      "1/3\n",
      "1/5\n",
      "1/7\n",
      "1/9\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[None, None, None, None, None]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[print(f'1/{n}') for n in range(1,11,+2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOwAAAASCAYAAABYSzJ9AAAABHNCSVQICAgIfAhkiAAAA4xJREFUeJzt28mLXUUYxuGnTQIOJDEugqCgpo0GFQyKAyp61aDoQoIDiBiErAQlGvEP6AiCG0URXYqKggMuHDa6cREUXTiAYxKjvRCVEOchiBpd1LlYOX3uTapOd5G+1AuH6nu6+vvV21DnO/VV3amZmRlVVVWLQ0d03DsRT+Ab/IlZPIxVGfFTYk1hM97Br/gDH2ALlswTI5dTglG9TIaXHMaNeBTb8Qv+xTOdBloZdhpvYzVexuc4H5djBy7G92OM9Yn1NDZhD17F79iAM/ASbmqM9B1vKqcEo3qZHC85jA9xNn7D11iHZ3Frq5+lrc+PNwPbIsz4oR7CVtyP29tBRigl1sbG5FfCP2Nvc38ZXsANuA1P9hxvDqcEo3qZDC+5jK3CRP0Cl+FNIxRn2DXYLaT7aeyP+i3Ht0K6Xy08NcYpNdbwqXQnHmvFOgsf4X2c24Mhg1OCUb1MjpccRlsDYcJ2Zth4DXtF077RGhjhXfwtHI0Lx8ByYx3ftF92xBreOwfH9hxvKqcEoxSneklj5HByGEmKJ+zpTbtzRN9dTXvaIcRNjTV8dTilo++a6Od1PRg5nBKMUpzqJY2Rw8lhJCmesCub9ucRfYf3D+XpkBrrtaa9B8dF/ZZiW/Q5rsrljDeVU4JRilO9pDFyODmMJLWLTuM01bTtCleO2rGeE97Xr8GneEUoh28Q1g67sBb/9GAsBKcEo3pZPF4WgnGA4gw7fFqs7OqIFa1+45Qaaz+uw734Tli4bxYqZ5f4v2y+p+d4UzklGNXL5HjJYSQpzrA7mnbUGnVt0456n4+VE+tvPNhcsY7CeuzDJz0ZqZwSjFKc6qWMl1RGkuIMO9z7ucrcE1DLhQ3ifcIJjoNpPmNtwpHCPtZfC8QYxSnBKMWpXtIY880ZxUhSPIjdQvn6ZNzR6rcNxwj7TPEe7LRQ8VrW6p8Ta4W5Og8PCCdA7psHRiqnBKN6mSwvqYwkHexo4me4QDiGtRMXOfAY1ixOEsrYs63YqbHeFZ5WHwt7XGfiWuHs5vV4vWP8qYwcTglG9TI5XnIYG5uLsJd7tbBvu725t1dYF1syGAziP/wRzwtl5wGuFLLnU0JK/6EFulsoaT+Cn1q/S421SjgBMsClwob0i7gF73WYzGHkcEowqpfJ8ZLDuBl3CWvcU6M465vrBOHLBnMybFVV1WGsrq/XVVVVHaaqE7aqahHpPxzudtFOnR1FAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 0.09090909090909091$"
      ],
      "text/plain": [
       "0.09090909090909091"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quociente = lambda x: (x-1)/(x**2-1)\n",
    "def verifica(x, f):\n",
    "    if ((x == 1) or (x == -1)):\n",
    "        return print(' \"X\" nao pode ser 1 ou -1, valor de x:{x}')\n",
    "    return f(x)\n",
    "verifica(10,quociente)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Aula 14/05***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fatorial Recursivo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "fat n = n*fat(n-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "fat 0 = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fatorialRecursivo(n):\n",
    "    if ((n == 0) or (n ==1)):\n",
    "        return 1\n",
    "    else:\n",
    "        return n*fatorialRecursivo(n-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABsAAAASCAYAAACq26WdAAAABHNCSVQICAgIfAhkiAAAAYhJREFUOI3d1b9LVWEcx/HXLUe3hhYbXCKhpQYnBw0MXBqKpqjQ3AIJHMLg5sXJRSgKCkpS/AMagqhF0QSnoCEixSFq6A4lCImK1W14nurxcM49F4KCPnB4nsP3y/f9fH+c51RqtZq/pQPJ/hCG8Rjr2MYmlnEl41uki2jEZzhrbEv253EPH7GA9ziMs3iIgejTKAAdwR18QXtZZms4gw5cwBiGcAwfcC6C81TBI3zG/QKffbB5PMH3jE89CdBbEGcEpzCIrVZgzbQX1685ti5M4jaWmgVpBdaGS3H/LMc2J/T3RiuByjSJ43iK5xnbTZxAjzC9TVWW2QhG8VYY61TdQjZTWCk9cgnsqtCHN+jDRmL7Wb41VFsBNYNdw128jqB6xt6Oo8Jw7Pj9ITcwHn0exPdb6Qmzui706RX68SnHZxfTBQc9KfRxGauSEmdhVUzgJU7bX7pU23Kuo6hahM0KN88vpbDLEfQNL4ThyOodZgogpUphnXE9KPQsT4t/Aqv8q1/M/wX7Aa9UUaUuqEKFAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 24$"
      ],
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fatorialRecursivo(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Estrutura de uma Lista"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = [5,-2,10,0,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def head(lista):\n",
    "    return lista[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tail(lista):\n",
    "    return lista[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAABHNCSVQICAgIfAhkiAAAAOdJREFUKJGd0i1LREEUxvGfL6BwsZhMKhgMImK0LBeMZpvFb2G8H8BgMLjJsBa7aFyu+An8AGqUTYpuEtFwj+BeZl/uPnA4M8P8zzycOTNFUWiq2dr+BT9D4vXv0nyi0DvOEuefo6A3FE3sTaTUSws4wir6eMQ9vkdBK+jUzp5xjDJl7xL7AWbYRhvruMMOzOV5/h8qo2ofX+jhBktoRbHrSRtxEbmVsjdMvchZE2gv8lMd2sJyAljDeayvGGz5IU7QVTXjAxs4wCJucVqHutjEbtjJVCP1oPq3jmpwB6AyYqymmr2poF801y5Kp2VgowAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle 5$"
      ],
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "head(lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJMAAAAVCAYAAABCDNzQAAAABHNCSVQICAgIfAhkiAAABAxJREFUaIHt2nuIVVUUx/GP5h/RQ43CJIJqIvOPSonoQcVMCWJBET3+tIwehEElCdGLmREEI7KyJxEh1l9BRIhhT1MrIsgipMfowNiEmWnRQy16TH+sc5gz9zH3XO/jzAzzhcM+3L3vXot9fnftvdY9U3p6ekwySTOYmrnvwlDm+qYIhyYZ85xgpE6G0o6pFQZvRi+ebrITx+NWvI6dOIRf8SFuqeJLs7geT2ErfhML8EqN75yMl7Abf2EAT+C4lnlZjN1H8B4GxTP5GZ+jWzyzUg4KffRiV7ZjWoXBH6Cnaa4OcwOeww/YhO9wIq7Fi7giGTNUbYIGeAjz8Ae+x9wa40/Hx5iFN0SUPh93YxEuxv4W+FmE3WXYhnewF0fjQqGB25P7wcz4g4b10YVT0o5KYmoVfbgaG/Bf5vMH8CmuE8J6rQW2lwkR7USnEPNoPCse6F0ioqWsTuZaiTua72YhdqfjzwqfrxTP5n4szTNRK7eWUt7HeiOFBHvwfHLf1SLbm7BDvqjXgYVie3mmpK8bB7BY/IKbSVF2KwkJXk3aM/JO1E4xjcbfSftPoV4Elyft28qF/zs+wlEi/E8Eu9W4Kmm/zPuFdm5z1ZiGG5P7jUU6knBm0vZV6d8hIsgccXAd73ZTluMYzMB5uEQIaVXeCcaCmFbhLLyJtwr2hVhMItOsRPr5zAliN2W5SIhSNmIJfso7QT3b3IDy+sJoV63Umzho3iuylsV1+FIkU5K2FVlnkXZnJzZmi0SoQ5QIzs07QT2RqV/1w1oldtfovxNP4issEPWNsUAaAWZU6Z9eMm682y3lR1EL3Ca23HVi56hJPWJaUL9fVbkHj2N7Mu/eJs7dKN8m7Zwq/Wl2U+1sM97sVmOX+KHPF1XvfbW+UEQ2d58Q0he4zNgSEsM1qIXK1+dYUTg8hE8miN3ROClp/80zuN1ielgcuD8TEamm2rFWnBOWtMyrkfSL9PxUsRVn6RV1nnWi7pNlrcb8PBy7jdqcK85IpUwVRctZoiL/S57J2pnN3YQVQuVbxeG7lAGxQFlSwTdSg7omuRhevIsytvaJbCZlqVjENUL0X+MCEUn78GAFG83ws167jdpchEexRYh5v8joOsUBfA9uyztZO8V0WtIeIc5MldisXExni6LdhgZszxdiztKRXMT5ICumflFrWSEW/Erxn+IaESUqJQvN8LNeu43afBcviC10nig7HBDCfTmxmzsxaqeYetT/B/JMnIPH5Ay1TbQ9iJtzjm2Wn/XYbYbN7cq31MOm0pmp29h5n+lS8VfL6qIdqUERfha1Ntn3mTqzHdnINCBCaUqew3GrWY8ji3YiB0X4WdTapO8zlVEqpp42ODPJ+Cb7PtMIxspbA5NMAP4HXqwYTTI3gGsAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\left[ -2, \\  10, \\  0, \\  3\\right]$"
      ],
      "text/plain": [
       "[-2, 10, 0, 3]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tail(lst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "lista = []\n",
    "\n",
    "lista = valor ++ lista\n",
    "\n",
    "lista = cons(valor, lista)\n",
    "\n",
    "[4,3,7,9] = cons(4,cons(3,cons(7,cons(9,nil))))\n",
    "\n",
    "Introdução a integrais\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "O conceito de integral de uma função está estritamente ligado à determinação da área do gráfico de uma função com relação ao eixo horizontal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "X = np.linspace(-3,3,200)\n",
    "\n",
    "parabola = X**2\n",
    "\n",
    "cubica = [x**3 for x in X]\n",
    "\n",
    "plt.grid(True, linestyle='-.')\n",
    "#plt.plot(X,parabola)\n",
    "plt.plot(X,cubica)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "import sympy as sym\n",
    "from sympy import *\n",
    "\n",
    "from IPython.display import display\n",
    "from sympy.interactive import printing\n",
    "\n",
    "printing.init_printing()\n",
    "\n",
    "x, y, z, h, t = symbols(\"x y z h t\")\n",
    "a, b, k, m, n = symbols(\"a b k m n\", integer = True)\n",
    "\n",
    "f, g=map(Function, 'fg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Integral definida\n",
    "$$ \\int_{a}^{b} f(x) \\ dx $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFQAAAAUCAYAAAATMxqtAAAABHNCSVQICAgIfAhkiAAABGlJREFUWIXt2FuIVlUUB/Df5FSKmkVhPXQzUZGMKNK0yNTSrOgypS+VXchACuwKXdQci8qgzOwqXSzsJcokSk27iGYZQlHRdcoLEplmpaiZltrD2h/uOXO+GXWGHsI/fOzzrb322mf/91prr31q6uvr7Ufb4YDs+XCMxmz8iK3YiCW4vqCb42i8iJ+xDaswFYe1MPdZmIU1adwaLMAFJbqrsKvK75c20M9xJHZgWjM6ozJ7o/OO2ux5JJ4RC1uI1cn4ZXge5yedXdmY7vgYXfEmvkM/3IzhOBO/lbzQeNyP9Xg7zXkETsEgzC0Zs1FsVBGbS2T7ol/BJcJ5ZlfpPwZPJDudip05oQ24GHOwM5Pfg2W4XJA7K+t7WpA5Nk1SwRTcigcwpjDnSEHme8nepkL/gVUWsgH1VfraQr+COuEEi0v6ajAj9b+BO4oKeRh/gLc0JpMIkWfT86BMfgKGifB6qjBmIraI0OhYmO9h/IkrNCUT/i6R/VfogiGChx0l/WNT/3VifU1QWyYsQWWR/2SyIaldoOkmbMJHgvD+eD/Jz0A3vI4/cCH64C8RBUubeYeDcRWOFYv5UnhR2cL3RV96n4OE9xXRG5PxeLIzpERnjwitxdXp+Z1M3iu1DVXG/SAI7Wk3oX1Tuxaf4aTCmMUYgV9L7B2FmQXZSuEti9pAnwj3LXi3IK9NtlaLFFgV1U7uHJOFF83F/EzeJbUbq4yryA/NZF1TOwYdcC46J/vzMRCvldiagXMESR3FRkzH8ZiHk1upD+3FQTpPREyOe8WBea2ofqqiJULH4nZxeo9qQbeImtTmVUG7rG+E8NzN+Fp4x084GwMKtiaJHL9W5N+vxKZMERtT30p9Ipo6aXq69xNe+ajmUxKaJ/QmkS++wWD8XuiveGAX5TikoEfkTViBLwr6W+2OgH7NvFeOymE5sA3067BdVDkVVEK9ARP2ZIJqhN6CJ8XODlZeDH+f2p5VbPRIbZ5jK2M2VBlTIbxDlf4i1qW2Y7NaLeu3w0XCq3MH6CTW11ukgfyCMDHpPJf+T6X8ULpT5M3PMVQU32VYmNphYmPyk76zKOq34pNMvlhUCj3Eabq9YLNPaldVmbOISmpY0Ur9geKmWAz3bXihiq1TRV5dIhxlKU0JnYD78KkgqhjmOZaLkmmYSA95YT9JeMF0jeu19XgVV4pEPz7rG4rzhIfk1cSJ4iZVfJfjRBTBK63QJy4YO8VtL8dWhatlhnpB6MviJonGhF4jyNyBD8WBVMQqvJT9v1FcPaeJU/VbnC7SRAPGldi4LemME56xTCy2Ls19g8YpYSTuEhGxUtS43UXN2F5UH4+0Qh8uTetYW/K+e4Wc0G6pbSdyaBkWaUzocpwmNmK4+LCxRhA8SbmHrxOEjhck9heLnoOHNE4RBDG9hDcMEJ6/QYTazPTb1Qr9vuIDz2NV1rxXqNn/+c6DuFtcpVe21tieFPb/d9SJEq7VZLLnd/n/M3q3pbH9HtrG2E9oG+Nf4skxryFXC4MAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\frac{20655}{4}$"
      ],
      "text/plain": [
       "20655/4"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(x**3,(x, -3,12))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Integral Indefinida\n",
    "$$ \\int f(x) \\ dx $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACwAAAAYCAYAAACBbx+6AAAABHNCSVQICAgIfAhkiAAAAn1JREFUWIXt10uoTVEYB/AfVxjcMqAYMBMZyKOI8kp5RLqOiSRJKBlQSiGPM0AKdS8G8ghJCXmE5JGBxMSEKERKCt28yuMSrsFal23ffY5j2wbKv1Zn7+/71n//97e+tb59OpTLZf8SOhbItQqt2FEgZzsUJXgEFuJWQXwVUYTgbjiE+XhVAF9VFCF4F47hcg2xPfEF26rEzBFKqxUL0s5OOQQmsRB940NqQYOQpBMV/H2wHW9RnxXwJxnuj42YjU81zinhBa5k+DpgX/TvrESQFnxBWIoZGWT7o29TtI1ED9zG5zjGYnG87pLi6IbxOC2URRpLon8e3tUqeDm+Yj3qEvYtmIvdWBFtJzEQgxPjBg7H63TWp6IzjmfoGCAkokl29r8jXcM3cTCKmyNkdRWW4QgWJWJfx5HEO7wUsp5GKfovZmg4iMfxWVWRtelWYybKQuFvwPn4Al9/RVgBXTEZ59CS8q3FEIzChzyCn6BRWPrtuCbUdC0ba1wF+0Th5dOnw3Ahq1txvQb+iqdEc+J6Pt7XQlYFJeGFzyZsbaVwH2tqJcoSPEvYZM/i/dJ8Gr+jDtOExvImYa9HP2HDtfjRLFqxLsbsjveNbZPSJTEFB3BHOGKuCN2mCXdzCh6D7tqXw0fsrTBnqFDXV3FPolySgkcJLfaJUHPNwlIdFY6c6TkFzxA266mU/YOM1htRjoIPYE/S0VYSg3BGWLIJeBrtx4SztQGjcwqeLmzc5znn/4SOwrfAeaFWJuFhKmZl/N2cg38Yeqv87fDb6IQH6FUl5pLQmvOgFH9/V3A5jnYo8h9HFkpC93xUFOGffl7+CgOKJvzbGS4c/wX/bXwDCOOEEmu0M1kAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\frac{x^{4}}{4}$"
      ],
      "text/plain": [
       " 4\n",
       "x \n",
       "──\n",
       "4 "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(x**3,x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$ \\int x^2 dx = \\frac{x^3}{3} +c$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABcAAAAWCAYAAAArdgcFAAAABHNCSVQICAgIfAhkiAAAAXZJREFUOI3d1LFLlVEYx/HPNUddmvwDHArEdjOpRAMXwU2oDHQoEIQouIrBHRIEFUTBxaVoi7brktgqgg42KA26CQoXhBoiotThvMnL8VW7vrr4wOF9z3Oe8z2H5/ecp1AqlVyV1eTcP4xV/EAFZTRdFvw+5tCCh/iDJdyE2pzwR9H8Cb7jLsp5bx5bvZCNffKnJbZprGOF/GlJ2wTacA9/OXnzRRyiJ/IX8C5ZG88AT+Ep2rH1zxnDX+MAb3Ej5Z9EH+ZRjPbM4DEeYDO9EMO/4gNuC8rDCF7iI55H8XN4hl5BxIZk1GXBYRS/UMIgxvA5Oewgin0hVMgX7KbGK7IF3RFUL2IWy4IGvzNiCxm+YzutFCup/378PAtSDbxXEHAvmQ9dBJwF78J7bKAZ3zCAW3nhrfgk5LxTSM0bQZes2v5v+B0sCE2nQ1BcctgauoWXVzW8USi1Q6HLbUcxw8l3olp4rfBcG86IWXJOyZ1ml90Vrwn8COjER555uTirAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle x^{2}$"
      ],
      "text/plain": [
       " 2\n",
       "x "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(x**3/3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conceituação Matemática\n",
    "Integral Definida -- se $f$ é uma função contínua definida no intervalo $a \\leq x \\leq b$, dividimos o intervalo $[a,b]$ em $n$ subintervalos de comprimentos iguais $\\Delta x = (b-a)/n$\n",
    "\n",
    "Sejam $x_0,x_1,x_2,...x_n$ (em que $x_0 = a$ e $x_n = b$) as extremidades desses subintervalos, escolhemos os pontos amostrais $x_1^*,x_2^*,x_3^*,...x_n^*$ nesses subintervalos, tal que $x_n^*$ esteja no $i$-ésimo subintervalo $[x_i-1,x_i]$. Então a integral definida de $f$ de $a$ à $b$ é\n",
    "\n",
    "$$\\displaystyle \\int_a^b f(x) \\ dx = \\lim_{n \\rightarrow \\infty} \\sum_{i =1}^{n} f(x_{i}^{*}) \\Delta x $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Soma de Riemann"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def integRiemann(func,a,b,n=10000):\n",
    "    step = ((b-a)/n)\n",
    "    round_case = round(math.log(n,10))-1\n",
    "    values = [func(a+num*step)*step for num in range(n+1)]\n",
    "    return round(sum(values),round_case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAADoAAAASCAYAAAAKRM1zAAAABHNCSVQICAgIfAhkiAAAAjZJREFUWIXl1jtoVEEUBuAv0TQ+EiUSgwg+oknATkQDCq4Ggo2NvWgjSARRsFGLrEVAEcQH2giC6bQROxGCIChWBizURARfiA+SKCpRwUcxs3C52Q33ZjeF5m8OO/v/M/PPnDvn1BWLRbMB9WXGluMK3uIHXuAsFuec+xQG8RoTGMMQ+tBcA34uTV3qRttwHy24iafYiG0YxmaMZjT6Ew/xGB8wH13YIBxiV9zgdPm5NHNTwkvR5EFcSIyfwWH0Y39Go434Xma8H8dwFL1V8HNpkqm7Gj1Cql5MCfvwDbuFU8uCchuA6zGurZKfS5M0uj3G2/idEn7BPcwT0qEa7Izx0Qzxy2qSqdsR40gF8TPhxtuFByArjmABmoRvZ0vcwMka8TNpkkabYvxcYbLS+KIpFqy0iaWJ37ewFx9rxM+kKVdeKqEuxj85NNAata3YJbwFQ1hfI34mTdJo6caalEdjipcX73FDSP9mDNSYP6UmaXQ4xvYKk5ResErfcFa8FOreOiyZAX5ZTdLonRh7TE7phUKzMIEHGRebCsti/DVD/EmapKHnQmlZiQMp0Qmhfg4I9bSENnSiIcXvFL6XNOqFYt4idGDj0+Tn1qQ7o97453l04wk2CS3gCI6n+INYgVVCo1HCDpzGXeEAR4VXcavwULzDvir4uTVzCoVCUjyOa0IDX4hmG3BV6IrGUosdEsrNOXxKjH8VTrZDOKhurMEbXMYevKqCn1uTbur/W+Spo/80Zo3Rv3hQtOZ7X+8kAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 0.333$"
      ],
      "text/plain": [
       "0.333"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integRiemann(lambda x:x**2, 0, 1, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAO0AAAASCAYAAAC3iVlDAAAABHNCSVQICAgIfAhkiAAABVRJREFUeJzt2meIXUUYBuBnk4gtMcZoEixY1pIgKBZixWyMBsSG/raCRrGXYAPNRhCs0aCIYI0NRbFEsMTegz/sxhqN3VhiTxE0/vjmxrMn996952Sze4T7wmX2zn7vnPfc98zMd2amo7u7WxtttPH/waA6dZviFnyDZViAazCiYNuX4Wl8iSVYhDcwDSP7IL4sBw7EHHyVeJ/iPuwxgLoWYHmDz3dN7qWoX2X8rSqnirrKPpNZHOk/74/L/7MjN9N24hWMwsP4AOMxER9iL/zU4oX/wuuYh++xLnbHruLmd083Vja+LOcynJPu4yH8iK1xCIbgKNw5ALoWYH3xMOTxB66sU1/UrzL+VpVTVV1lvM9iM7yDwRiK43FTNmBIjnB9Encars3Uz8CZuAQnNrlgFuthaZ36S3ABzsdJqxBfhjMGU7EQO4gftYaJeAYX69lp+0NXDb+gu059IxT1q4y/VeVUVVdZ76EDt4pB4AHxrK4clJlpt8J8MeJ34p9M3DB8mxodhT8bXLQV7Ig38RT2Xw3xzTi7YS5m49A6vN/EPQ7rZ13E7w5btNhWUb/K+FtVTlV1NUMrz8vpuBpd2Fek1CvNtNl32n1TOScnDn7Hy1hHTO+rgoNT+fZqim/G+VikL+OxYe5/+wgjnhoAXTWsiSPEiHy6mP0HN4gt6lcZf6vKqaquZujN+3G4FDPxQrOGsunxdqn8qEHsx5iMbcWLdquYKnLz4SKv31sIv7SP4otwFuFckdrME++0P4lR9BA8iRMGQFcNY3BHru4zHIvnc/VF/Srjb1U5VdWVRRHvhwjfvxADdlNkO+3wVP7aILZWv35vjeYwFaMz3x/HMfihj+KLcq4R6c4tIvWo4RPcpud7bn/quhUv4j0xim+FUzAFj4mV7bcy8UX9KuNvVTlV1ZVFEe8vwk6iYy9pcK0VqLfl0wgdqVxegEPMHh2pPFw8jG9g5z6KL8o5B/eLDtopVvd2Eds+d+HyAdI1XSyELcRivCsWOGZgbcUWqCjuVxl/q8qpgq5WvR8vZter8GorF8122tqoMbxeoFgVy8YVxUI8KNKJkbi9j+Nb4XSJLZ/ZOEt01MViif4wfI2zxQ/cn7qa4YZU7pOrL+pXGX+ryqmqrnpo5n0tLf4IFzZpoweynfbDVG7bIHabVDbK71vF5+J9cnsrLwb1RXwzzkGpfLYOZzFeE7/JTv2sqxlq6fq6ufqifpXxt6qcqupqhnreD01tjxPbRNkDNdNSzI3p+4r9++w7be1Bniwe3Pzy9l4i357bgsDesHEq/15N8Y04a6ZyowacWv1f/ayrGWqntD7N1Rf1q4y/VeVUVVdvyHu/DDc3iN1ZTB4vicFjReqcnWnni6XtLXByroHpYqS/Xc/9qE6MxRq5+LEil89jkNhkHiVOmfxcMr4s58VUTsEmOd4BwoSlidefurbHBnU4m+O69Peduf8V9auMv1XlVFVXUe+XiGOK9T6zU8ys9P3eWmO9HWN8XxxImChSgD31PLK1QDxYW/rvcACcgSvEftP8xBmNCeJ98TtMEulCmfiynEF4AvuJFdoHU9w4kTp3pHZn9rOubpwnRvbPkrZOcUZ6LTwq3rnzGUBRv4rGV5lTRV1lvG+Ebg0OVwzu6urKfv9Z9OgRYtFmkphFZ4lDzItyDZ8hlrtniiN4NfwhOsh26QYnifO9X4kc/WixJ1U2vixnOe5J9zFaLO5MEAsEz+FU3D1AuoaKwWOPpGmMeMeeLjp0vXS6qF9F46vMqaKuMt43Qlf6PCIWSlcgP9O20UYbFUeRfdo22mijAmh32jba+J/hX/d2V5qQC7XEAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 0.33383350000000034$"
      ],
      "text/plain": [
       "0.33383350000000034"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "somaRiemann = lambda f,a,b,n: sum(map(lambda i: f(a+i*((b-a)/n))*((b-a)/n), range(n+1)))\n",
    "somaRiemann(lambda x:x**2,0,1,1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A integral definida $\\int f(x) dx$ é um número\n",
    "\n",
    "A variável independente pode ser indicada de outros modos:$$\\int_{a}^{b} f(x) dx = \\int_{a}^{b} f(t) dt = \\int_{a}^{b} f(r) dr  $$\n",
    "\n",
    "O somatório $\\displaystyle \\sum_{i=1}^{n} f(x_i^*) \\Delta x$ é chamado de Soma de Riemann, em homenagem ao autor desta denifição de Integral\n",
    "\n",
    "Propriedades da Integral\n",
    "A partir da definição de integral, tem-se que $\\int_{a}^{b} f(x) dx = - \\int_{a}^{b} f(x) dx $ e que $\\int_{a}^{b} f(x) dx  = 0$ pois se $a=b$, então $\\Delta x = 0$\n",
    "\n",
    "Propriedades da Integral Definida\n",
    "$$\\int\\nolimits_{a}^{b} c\\, dx = c\\ (b - a)$$$$\\int\\nolimits_{a}^{b} c\\ f(x)\\, dx =  c \\int\\nolimits_{a}^{b} f(x)\\, dx \\qquad \\textrm{em que c é uma constante} $$$$\\int\\nolimits_{a}^{b} [f(x) + g(x)]\\, dx = \\int\\nolimits_{a}^{b} f(x)\\, dx  + \\int\\nolimits_{a}^{b} g(x)\\, dx $$$$ \\int\\nolimits_{a}^{b} [f(x) - g(x)]\\, dx = \\int\\nolimits_{a}^{b} f(x)\\, dx  - \\int\\nolimits_{a}^{b} g(x)\\, dx $$$$ \\int\\nolimits_{a}^{c} f(x)\\, dx + \\int\\nolimits_{c}^{b} f(x)\\, dx = \\int\\nolimits_{a}^{b} f(x)\\, dx $$\n",
    "O Teorema Fundamental do Cálculo, Parte I\n",
    "\n",
    "se $f$ é contínua em $[a,b]$, então a função $g$ definida por$$g(x) = \\int_{a}^{x} f(t)dt \\qquad a \\leq x \\leq b$$é continua em $[a,b]$, derivável em $(a,b)$ e$$g'(x) = f(x)$$\n",
    "\n",
    "O Teorema Funcamental do Cálculo, Parte II\n",
    "\n",
    "Se $f$ é contínua em $[a,b]$, então$$\\int_{a}^{b} f(x)dx=F(b)-F(a)$$em que $F$ é qualquer primitica de $f$, isto é, $F$ é uma função tal que $F'=f$\n",
    "\n",
    "Com isso concluímos que:\n",
    "\n",
    "A primitiva de uma função $f$ é indicada pela notação $\\int f(x) dx$ ou seja $\\int f(x) dx = F(x)$ então $F'(x) = f(x)$\n",
    "$\\qquad$ou seja a derivada de $f(x)$ é $F(x)$ e a derivada de $F(x)$ é $f(x)$\n",
    "\n",
    "Portanto uma Integral Indefinida representa uma familia de funções, em que as primitivas se diferem pelo valor de uma constante $C$\n",
    "$$\\int x^2 dx = \\frac{x^3}{3}+C \\qquad \\textrm{pois} \\qquad \\frac{d}{dx} \\left(\\frac{x^3}{3}+C \\right) = x$$\n",
    "com isso concluímos que:\n",
    "\n",
    "a Integral Definida $\\int_{a}^{b}f(x)dx$ é um número\n",
    "a Integral Indefinida $\\int f(x)dx$ é uma família de funções"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
